name: Terraform

on:
  push:
  #   branches: [ "master" ]
  # pull_request:

permissions:
  contents: read

env: 
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

jobs:
  Terraform:
    name: 'Deploy infra'

    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: cd terraform && terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: cd terraform && terraform plan -input=false

     # On push to "master", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply 
      # if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      run: cd terraform && terraform apply -auto-approve 

    - name: Get terraform output
      id: terraform_outputs
      working-directory: ./terraform
      run: |
          terraform output -json > outputs.json
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Get ip public
      id: terrafor_outputs
      working-directory: ./terraform
      run: |
          NGINX_IP=$(terraform output -raw nginx_public)
          IIS_IP=$(terraform output -raw iis_public)

          echo "linux $NGINX_IP"
          echo "windows $IIS_IP"

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Install Ansible
      run: |
          python <<EOF
          import json

          inventory = f"""
          all:
            hosts:
              windows:
                ensible_host: ${IIS_IP}
                ansible_user: lnxuser
                ansible_password: !q2w3e4r
                ansible_connection: winrm
                ansible_winrm_transport: basic
              linux:
                ansible_host: ${NGINX_IP}
                ansible_user: lnxuser
                ansible_password: !q2w3e4r5t
                ansible_connection: ssh
          """

          with open('./ansible/inventory.yml', 'w') as f:
              f.write(inventory)
          EOF
          cat ./ansible/inventory.yml

    # clone repo
    - name: Clone Weather Forecast App
      run: |
        git clone https://github.com/sample-accelerators/csharp-weatherforecast.git ./weather-app

    # Step 9: Run Ansible Playbook
    - name: Run Ansible Playbook
      run: ansible-playbook -i ./ansible/inventory.yml ./ansible/site.yml

