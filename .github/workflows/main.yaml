name: 'Terraform'

on:
  push:
  #   branches: [ "master" ]
  # pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    env: 
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: cd terraform && terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: cd terraform && terraform plan -input=false

     # On push to "master", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply 
      # if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      run: cd terraform && terraform apply -auto-approve -var "public_key=${{ secrets.PUBLIC_KEY }}" 