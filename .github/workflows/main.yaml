name: Terraform

on:
  push:
  #   branches: [ "master" ]
  # pull_request:

permissions:
  contents: read

env: 
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
  IIS_PWD: ${{ secrets.IIS_PWD }}
  NGINX_PWD: ${{ secrets.NGINX_PWD }}

jobs:
  Terraform:
    name: 'Deploy infra'

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: cd terraform && terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: cd terraform && terraform plan

     # On push to "master", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply 
      run: cd terraform && terraform apply -auto-approve 

    # - name: Get terraform output
    #   id: terraform_outputs
    #   working-directory: ./terraform
    #   run: |
    #       terraform output -json > outputs.json
    #   env:
    #     ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
    #     ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
    #     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    #     ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    # - name: Get ip public
    #   id: terrafor_outputs
    #   working-directory: ./terraform
    #   run: |
    #       NGINX_IP=$(terraform output -raw nginx_public)
    #       IIS_IP=$(terraform output -raw iis_public)

    #       echo "linux $NGINX_IP"
    #       echo "windows $IIS_IP"

    - name: Get IPs VMs
      working-directory: ./terraform
      run: |
          IIS_IP=$(terraform output -raw iis_public)
          echo "IIS_IP=$IIS_IP" >> $GITHUB_ENV
          NGINX_IP=$(terraform output -raw nginx_public)
          echo "NGINX_IP=$NGINX_IP" >> $GITHUB_ENV

    # clone repo
    - name: Clone Weather Forecast App
      run: |
        git clone https://github.com/sample-accelerators/csharp-weatherforecast.git ./weather-app
        ls

    - name: Criar template ansible
      working-directory: ./ansible
      run: |
        touch inventory.yaml
        cat <<EOF >inventory.yaml
        all:
          hosts:
            iis:
              ansible_host: ${IIS_IP}
              ansible_user: lnxuser
              ansible_password: ${IIS_PWD}
              ansible_connection: winrm
              ansible_port: 5985
              ansible_winrm_scheme: http
              ansible_winrm_transport: basic
            nginx:
              ansible_host: ${NGINX_IP}
              ansible_user: lnxuser
              ansible_password: ${NGINX_PWD}
              ansible_connection: ssh
        EOF
        cat inventory.yaml

    - name: Run Ansible Playbook
      working-directory: ./ansible
      run: |
        ls
        pwd
        ansible-playbook -i inventory.yml tasks.yml

